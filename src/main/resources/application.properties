spring.application.name=activiti-with-boot
server.port=8888

##############################################################################
#########SpringBoot配置属性之datasource
##############################################################################
spring.datasource.url=jdbc:mysql://192.168.0.76:3306/springBoot-activiti?characterEncoding=utf8&useSSL=true
spring.datasource.username=root
spring.datasource.password=qylc@123
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#自动创建、更新、验证数据库表结构
spring.jpa.properties.hibernate.hbm2ddl.auto=update
#create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#create-drop ：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
#update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据 model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
#validate ：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
#none表示啥都不做
spring.jpa.database=MYSQL
#配置输出SQL
spring.jpa.show-sql=true
#设置需要身份验证
security.basic.enabled=true
security.user.name="abc"
security.user.password="123"



#外置，当前目录的 “/config”的子目录下
#外置，当前目录下
#内置，classpath根目录的“/config”包下
#内置，classpath的根目录下
#优先级从高到低，例如在生产环境.jar的同级目录下放置application.properties文件就能替换工程中配置文件
#如果在windows下放在项目的根目录下
